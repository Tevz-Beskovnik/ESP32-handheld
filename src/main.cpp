#include <Wire.h>
#include <Arduino.h>
#include <Console-Core.h>

#define SHARP_CLK  25
#define SHARP_DI 26
#define SHARP_CS   27

#define SCREEN_HEIGHT 240
#define SCREEN_WIDTH 400

#define BLACK 0
#define WHITE 1

#define BUTTON_UP 35
#define BUTTON_DOWN 33
#define BUTTON_LEFT 34
#define BUTTON_RIGHT 32

#define MOVEMENT_SPEED 8

int minorHalfSize; // 1/2 of lesser of display width or height

uint16_t x = 200, y = 0;
/*uint8_t sprite[128] = {
  0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111111, 0b10111111, 0b11111111, 0b11111111, 
  0b11111111, 0b01011111, 0b11111110, 0b11111111, 
  0b11111111, 0b00001111, 0b11111000, 0b11111111, 
  0b11111111, 0b00000111, 0b11100110, 0b11111111, 
  0b11111111, 0b00000011, 0b11010000, 0b11111111, 
  0b11111111, 0b00000001, 0b10100000, 0b11111111, 
  0b11111111, 0b01110000, 0b01001110, 0b11111111, 
  0b11111111, 0b11111000, 0b00011111, 0b11111111, 
  0b01111111, 0b11111110, 0b01111111, 0b11111110, 
  0b10111111, 0b11111110, 0b01111111, 0b11111101, 
  0b10111111, 0b10011110, 0b01111001, 0b11111101, 
  0b10111111, 0b10111111, 0b11111101, 0b11111101, 
  0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  0b11111111, 0b00111110, 0b01111100, 0b11111111, 
  0b11111111, 0b11111101, 0b10111111, 0b11111111, 
  0b11111111, 0b11111011, 0b11011111, 0b11111111, 
  0b11111111, 0b11100111, 0b11100111, 0b11111111, 
  0b11111111, 0b11011000, 0b00011011, 0b11111111, 
  0b01111111, 0b00111111, 0b11111100, 0b11111110, 
  0b01111111, 0b11111011, 0b11011110, 0b11111110, 
  0b01111111, 0b11111010, 0b01011111, 0b11111110, 
  0b01111111, 0b11111001, 0b10011110, 0b11111110, 
  0b01111111, 0b11111011, 0b11011111, 0b11111110, 
  0b11111111, 0b00000000, 0b00000000, 0b11111111, 
  0b11111111, 0b01111011, 0b11011110, 0b11111111, 
  0b11111111, 0b01111011, 0b11011110, 0b11111111, 
  0b11111111, 0b01100011, 0b11000110, 0b11111111, 
  0b11111111, 0b00011011, 0b11011000, 0b11111111, 
  0b11111111, 0b10000011, 0b11000001, 0b11111111, 
};

uint8_t house[128] = {
  0b11111111, 0b00111111, 0b11111100, 0b11111111,
  0b11111111, 0b10011111, 0b11111001, 0b11111111,
  0b11111111, 0b10101111, 0b11110101, 0b11111111,
  0b11111111, 0b00110111, 0b11101100, 0b11111111, 
  0b11111111, 0b10111011, 0b11011001, 0b11111111, 
  0b11111111, 0b10111001, 0b10010101, 0b11111111, 
  0b11111111, 0b10011010, 0b01001101, 0b11111111, 
  0b01111111, 0b00101011, 0b10011100, 0b11111110, 
  0b10111111, 0b10110001, 0b01011001, 0b11111101, 
  0b10011111, 0b10111010, 0b10010101, 0b11111000, 
  0b00101111, 0b00111011, 0b01001100, 0b11110101, 
  0b10110111, 0b11011011, 0b10011011, 0b11101000, 
  0b10111011, 0b11101001, 0b01010111, 0b11010101, 
  0b10111011, 0b00110010, 0b10001100, 0b11001000, 
  0b00011011, 0b11011011, 0b01011011, 0b11010101, 
  0b10101011, 0b11011101, 0b10111011, 0b11001000, 
  0b10110011, 0b11011110, 0b01111011, 0b11010101, 
  0b00111011, 0b11011111, 0b11111011, 0b11001000, 
  0b10011011, 0b00111111, 0b11111100, 0b11010101, 
  0b10101011, 0b11111111, 0b11111111, 0b11001001, 
  0b10110111, 0b11111111, 0b11111111, 0b11010101, 
  0b10111111, 0b11100001, 0b10000011, 0b11101101, 
  0b10111111, 0b11011110, 0b01111101, 0b11111101, 
  0b10111111, 0b11011110, 0b01111101, 0b11111101, 
  0b10111111, 0b11011110, 0b01111101, 0b11111101, 
  0b10111111, 0b11011110, 0b01111101, 0b11111101, 
  0b10111111, 0b11011110, 0b01111001, 0b11111101, 
  0b10111111, 0b11011110, 0b01111101, 0b11111101, 
  0b10111111, 0b11000000, 0b01111101, 0b11111101, 
  0b10111111, 0b11111111, 0b00000001, 0b11111101, 
  0b10111111, 0b11111111, 0b01000000, 0b11111101, 
  0b01111111, 0b00000000, 0b00000000, 0b11111110 
}; */

uint8_t tileMap[512] = {
  	0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111111, 0b11111110, 0b11111111, 
  	0b11111111, 0b10111111, 0b11111111, 0b11111111, 0b11111111, 0b10111111, 0b11111100, 0b11111111, 
  	0b11111111, 0b01011111, 0b11111110, 0b11111111, 0b11111111, 0b10011111, 0b11111010, 0b11111111,
  	0b11111111, 0b00001111, 0b11111000, 0b11111111, 0b11111111, 0b10101111, 0b11110010, 0b11111111, 
  	0b11111111, 0b00000111, 0b11100110, 0b11111111, 0b11111111, 0b11100111, 0b11101000, 0b11111111, 
  	0b11111111, 0b00000011, 0b11010000, 0b11111111, 0b11111111, 0b10101011, 0b11001010, 0b11111111, 
  	0b11111111, 0b00000001, 0b10100000, 0b11111111, 0b11111111, 0b10111001, 0b10100010, 0b11111111, 
  	0b11111111, 0b01110000, 0b01001110, 0b11111111, 0b11111111, 0b11101010, 0b00101000, 0b11111111, 
  	0b11111111, 0b11111000, 0b00011111, 0b11111111, 0b01111111, 0b10101110, 0b10001010, 0b11111110, 
  	0b01111111, 0b11111110, 0b01111111, 0b11111110, 0b10111111, 0b00111010, 0b10100010, 0b11111100, 
  	0b10111111, 0b11111110, 0b01111111, 0b11111101, 0b10011111, 0b10101011, 0b00101000, 0b11111010, 
  	0b10111111, 0b10011110, 0b01111001, 0b11111101, 0b10101111, 0b11001110, 0b10001010, 0b11110010, 
  	0b10111111, 0b10111111, 0b11111101, 0b11111101, 0b11100111, 0b11001010, 0b10100110, 0b11101000, 
  	0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b10101011, 0b11010011, 0b00100110, 0b11101010, 
  	0b11111111, 0b11111110, 0b01111111, 0b11111111, 0b10111011, 0b11011010, 0b10010110, 0b11100010, 
  	0b11111111, 0b11111110, 0b01111111, 0b11111111, 0b11101011, 0b11011000, 0b10110110, 0b11101000, 
  	0b11111111, 0b00111110, 0b01111100, 0b11111111, 0b10101011, 0b11011010, 0b00110110, 0b11101010, 
  	0b11111111, 0b11111101, 0b10111111, 0b11111111, 0b00111011, 0b11011011, 0b10110110, 0b11100010, 
  	0b11111111, 0b11111011, 0b11011111, 0b11111111, 0b10101011, 0b11011011, 0b10110110, 0b11101001, 
  	0b11111111, 0b11100111, 0b11100111, 0b11111111, 0b00001011, 0b00000000, 0b00000000, 0b11101000, 
  	0b11111111, 0b11011000, 0b00011011, 0b11111111, 0b00101011, 0b11111111, 0b11111111, 0b11110100, 
  	0b01111111, 0b00111111, 0b11111100, 0b11111110, 0b10110111, 0b11111111, 0b11111111, 0b11111101, 
  	0b01111111, 0b11111011, 0b11011110, 0b11111110, 0b10111111, 0b11111111, 0b11111111, 0b11111101, 
  	0b01111111, 0b11111010, 0b10011111, 0b11111110, 0b10111111, 0b11100001, 0b11000011, 0b11111101, 
  	0b01111111, 0b11111001, 0b01011110, 0b11111110, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  	0b01111111, 0b11111011, 0b11011111, 0b11111110, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  	0b11111111, 0b00000000, 0b00000000, 0b11111111, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  	0b11111111, 0b01111011, 0b11011110, 0b11111111, 0b10111111, 0b11011110, 0b11000011, 0b11111101, 
  	0b11111111, 0b01111011, 0b11011110, 0b11111111, 0b10111111, 0b11011100, 0b10000001, 0b11111101, 
  	0b11111111, 0b01100011, 0b11000110, 0b11111111, 0b10111111, 0b11011110, 0b11111111, 0b11111101, 
  	0b11111111, 0b00011011, 0b11011000, 0b11111111, 0b00111111, 0b11011110, 0b11111111, 0b11111100, 
  	0b11111111, 0b10000011, 0b11000001, 0b11111111, 0b00111111, 0b00000000, 0b00000000, 0b11111100, 
  	0b01111111, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b10111111, 0b00111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11011111, 0b11011011, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11101111, 0b11100111, 0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11110111, 0b11110111, 0b11111011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11111011, 0b11011011, 0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11111101, 0b10111101, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11111110, 0b01111110, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b01111110, 0b11111111, 0b10111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b10111101, 0b11111101, 0b00111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11011011, 0b11111011, 0b11011011, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11100111, 0b11110111, 0b11101111, 0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11110111, 0b11101111, 0b11110111, 0b11111011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11011011, 0b11011111, 0b11011011, 0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b10111101, 0b10111111, 0b10111101, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b01111101, 0b11111111, 0b01111110, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11111011, 0b01111110, 0b11111111, 0b10111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11110111, 0b10111101, 0b11111101, 0b10111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11101111, 0b11011011, 0b11111011, 0b11011011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  	0b11011111, 0b11101111, 0b11110111, 0b11101111, 0b11111111, 0b00011111, 0b11111000, 0b11111111, 
  	0b10111111, 0b11110111, 0b11101111, 0b11100111, 0b11111111, 0b11100111, 0b11100111, 0b11111111, 
  	0b01111111, 0b11011011, 0b11011111, 0b11011011, 0b11111111, 0b11111011, 0b11011111, 0b11111111, 
  	0b11111111, 0b10111100, 0b10111111, 0b10111101, 0b11111111, 0b11111101, 0b10111111, 0b11111111, 
  	0b11111111, 0b01111101, 0b11111111, 0b01111110, 0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  	0b11111111, 0b11111011, 0b01111110, 0b01111111, 0b11111111, 0b11010110, 0b01111111, 0b11111111, 
  	0b11111111, 0b11110111, 0b10111101, 0b10111111, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  	0b11111111, 0b11101111, 0b11011011, 0b11011111, 0b01111111, 0b10111011, 0b11111111, 0b11111110, 
  	0b11111111, 0b11011111, 0b11101111, 0b11101111, 0b01111111, 0b11000111, 0b11111111, 0b11111110, 
  	0b11111111, 0b10111111, 0b11100111, 0b11110111, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  	0b11111111, 0b01111111, 0b11011011, 0b11111011, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  	0b11111111, 0b11111111, 0b10111100, 0b11111101, 0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  	0b11111111, 0b11111111, 0b01111111, 0b11111110, 0b11111111, 0b00000001, 0b10000000, 0b11111111 
};

void gameLoop1(){
	glCall(CLEAR_DISPLAY_BUFFER);
	glCall(DRAW_TEX1, 192, 64);
	glCall(DRAW_TEX1, 64, 32);
	glCall(DRAW_TEX1, 64, 160);
	glCall(DRAW_TEX1, 128, 128);
	glCall(DRAW_TEX1, 320, 192);

	if(digitalRead(BUTTON_UP))
  	  	y-=MOVEMENT_SPEED;
  	if(digitalRead(BUTTON_DOWN))
  	  	y+=MOVEMENT_SPEED;
  	if(digitalRead(BUTTON_LEFT))
  	  	x-=MOVEMENT_SPEED;
  	if(digitalRead(BUTTON_RIGHT))
  	  	x+=MOVEMENT_SPEED;
	glCall(DRAW_TEX0, x, y);
	glCall(REFRESH_DISPLAY);
}

void setup(void)
{
  	pinMode(BUTTON_UP, INPUT);
  	pinMode(BUTTON_DOWN, INPUT);
  	pinMode(BUTTON_LEFT, INPUT);
  	pinMode(BUTTON_RIGHT, INPUT);
  	Serial.begin(9600);
  	Serial.println("Hello!");

  	initConsole(SHARP_CLK, SHARP_DI, SHARP_CS, SCREEN_WIDTH, SCREEN_HEIGHT);
  	delay(2000);

	registerGame(gameLoop1, "GameMain");
	setTileMap(tileMap, 64, 64, 32, 32);

	glCall(LD_TEX0, 0, 0);
	glCall(LD_TEX1, 1, 0);

  	//display.loadTexture(sprite, 32, 32, TEXTURE_BINDING_0);
  	//display.loadTexture(house, 32, 32, TEXTURE_BINDING_1);
  	Serial.println("Texture loaded");
  	Serial.printf("Flash size: %i\n", ESP.getFlashChipSize());
}

void loop(void) 
{
	consoleLoop();
  	/*display.clearDisplayBuffer();
  	display.drawTexture(192, 64, TEXTURE_BINDING_1);
  	display.drawTexture(64, 32, TEXTURE_BINDING_1);
  	display.drawTexture(64, 160, TEXTURE_BINDING_1);
  	display.drawTexture(128, 128, TEXTURE_BINDING_1);
  	display.drawTexture(320, 192, TEXTURE_BINDING_1);
  	if(digitalRead(BUTTON_UP))
  	  	y-=MOVEMENT_SPEED;
  	if(digitalRead(BUTTON_DOWN))
  	  	y+=MOVEMENT_SPEED;
  	if(digitalRead(BUTTON_LEFT))
  	  	x-=MOVEMENT_SPEED;
  	if(digitalRead(BUTTON_RIGHT))
  	  	x+=MOVEMENT_SPEED;
  	//display.drawBitmap(x, y, sprite, 32, 32, BLACK);
  	//display.fillRectD(x, y, 40, 40);
  	display.drawTexture(x, y, TEXTURE_BINDING_0);
  	display.refresh();*/
}