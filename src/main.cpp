#include <Wire.h>
#include <Arduino.h>
#include <Console-Core.hpp>

#define SHARP_CLK  25
#define SHARP_DI 26
#define SHARP_CS   27

#define BLACK 0
#define WHITE 1

#define MOVEMENT_SPEED 8

uint16_t x = 200, y = 0;

uint8_t tileMap[512] = {
  0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111111, 0b11111110, 0b11111111, 
  0b11111111, 0b10111111, 0b11111111, 0b11111111, 0b11111111, 0b10111111, 0b11111100, 0b11111111, 
  0b11111111, 0b01011111, 0b11111110, 0b11111111, 0b11111111, 0b10011111, 0b11111010, 0b11111111,
  0b11111111, 0b00001111, 0b11111000, 0b11111111, 0b11111111, 0b10101111, 0b11110010, 0b11111111, 
  0b11111111, 0b00000111, 0b11100110, 0b11111111, 0b11111111, 0b11100111, 0b11101000, 0b11111111, 
  0b11111111, 0b00000011, 0b11010000, 0b11111111, 0b11111111, 0b10101011, 0b11001010, 0b11111111, 
  0b11111111, 0b00000001, 0b10100000, 0b11111111, 0b11111111, 0b10111001, 0b10100010, 0b11111111, 
  0b11111111, 0b01110000, 0b01001110, 0b11111111, 0b11111111, 0b11101010, 0b00101000, 0b11111111, 
  0b11111111, 0b11111000, 0b00011111, 0b11111111, 0b01111111, 0b10101110, 0b10001010, 0b11111110, 
  0b01111111, 0b11111110, 0b01111111, 0b11111110, 0b10111111, 0b00111010, 0b10100010, 0b11111100, 
  0b10111111, 0b11111110, 0b01111111, 0b11111101, 0b10011111, 0b10101011, 0b00101000, 0b11111010, 
  0b10111111, 0b10011110, 0b01111001, 0b11111101, 0b10101111, 0b11001110, 0b10001010, 0b11110010, 
  0b10111111, 0b10111111, 0b11111101, 0b11111101, 0b11100111, 0b11001010, 0b10100110, 0b11101000, 
  0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b10101011, 0b11010011, 0b00100110, 0b11101010, 
  0b11111111, 0b11111110, 0b01111111, 0b11111111, 0b10111011, 0b11011010, 0b10010110, 0b11100010, 
  0b11111111, 0b11111110, 0b01111111, 0b11111111, 0b11101011, 0b11011000, 0b10110110, 0b11101000, 
  0b11111111, 0b00111110, 0b01111100, 0b11111111, 0b10101011, 0b11011010, 0b00110110, 0b11101010, 
  0b11111111, 0b11111101, 0b10111111, 0b11111111, 0b00111011, 0b11011011, 0b10110110, 0b11100010, 
  0b11111111, 0b11111011, 0b11011111, 0b11111111, 0b10101011, 0b11011011, 0b10110110, 0b11101001, 
  0b11111111, 0b11100111, 0b11100111, 0b11111111, 0b00001011, 0b00000000, 0b00000000, 0b11101000, 
  0b11111111, 0b11011000, 0b00011011, 0b11111111, 0b00101011, 0b11111111, 0b11111111, 0b11110100, 
  0b01111111, 0b00111111, 0b11111100, 0b11111110, 0b10110111, 0b11111111, 0b11111111, 0b11111101, 
  0b01111111, 0b11111011, 0b11011110, 0b11111110, 0b10111111, 0b11111111, 0b11111111, 0b11111101, 
  0b01111111, 0b11111010, 0b10011111, 0b11111110, 0b10111111, 0b11100001, 0b11000011, 0b11111101, 
  0b01111111, 0b11111001, 0b01011110, 0b11111110, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  0b01111111, 0b11111011, 0b11011111, 0b11111110, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  0b11111111, 0b00000000, 0b00000000, 0b11111111, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  0b11111111, 0b01111011, 0b11011110, 0b11111111, 0b10111111, 0b11011110, 0b11000011, 0b11111101, 
  0b11111111, 0b01111011, 0b11011110, 0b11111111, 0b10111111, 0b11011100, 0b10000001, 0b11111101, 
  0b11111111, 0b01100011, 0b11000110, 0b11111111, 0b10111111, 0b11011110, 0b11111111, 0b11111101, 
  0b11111111, 0b00011011, 0b11011000, 0b11111111, 0b00111111, 0b11011110, 0b11111111, 0b11111100, 
  0b11111111, 0b10000011, 0b11000001, 0b11111111, 0b00111111, 0b00000000, 0b00000000, 0b11111100, 
  0b01111111, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b10111111, 0b00111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011111, 0b11011011, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11101111, 0b11100111, 0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11110111, 0b11110111, 0b11111011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111011, 0b11011011, 0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111101, 0b10111101, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111110, 0b01111110, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b01111110, 0b11111111, 0b10111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b10111101, 0b11111101, 0b00111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011011, 0b11111011, 0b11011011, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11100111, 0b11110111, 0b11101111, 0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11110111, 0b11101111, 0b11110111, 0b11111011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011011, 0b11011111, 0b11011011, 0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b10111101, 0b10111111, 0b10111101, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b01111101, 0b11111111, 0b01111110, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111011, 0b01111110, 0b11111111, 0b10111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11110111, 0b10111101, 0b11111101, 0b10111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11101111, 0b11011011, 0b11111011, 0b11011011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011111, 0b11101111, 0b11110111, 0b11101111, 0b11111111, 0b00011111, 0b11111000, 0b11111111, 
  0b10111111, 0b11110111, 0b11101111, 0b11100111, 0b11111111, 0b11100111, 0b11100111, 0b11111111, 
  0b01111111, 0b11011011, 0b11011111, 0b11011011, 0b11111111, 0b11111011, 0b11011111, 0b11111111, 
  0b11111111, 0b10111100, 0b10111111, 0b10111101, 0b11111111, 0b11111101, 0b10111111, 0b11111111, 
  0b11111111, 0b01111101, 0b11111111, 0b01111110, 0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  0b11111111, 0b11111011, 0b01111110, 0b01111111, 0b11111111, 0b11010110, 0b01111111, 0b11111111, 
  0b11111111, 0b11110111, 0b10111101, 0b10111111, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b11101111, 0b11011011, 0b11011111, 0b01111111, 0b10111011, 0b11111111, 0b11111110, 
  0b11111111, 0b11011111, 0b11101111, 0b11101111, 0b01111111, 0b11000111, 0b11111111, 0b11111110, 
  0b11111111, 0b10111111, 0b11100111, 0b11110111, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b01111111, 0b11011011, 0b11111011, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b11111111, 0b10111100, 0b11111101, 0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  0b11111111, 0b11111111, 0b01111111, 0b11111110, 0b11111111, 0b00000001, 0b10000000, 0b11111111 
};

// screen res 400 240
#define GAME_W 19
#define GAME_H 13

uint8_t tilemap2[288] = {0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00111111, 0b11111110, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00011111, 0b11111101, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00111111, 0b11111010, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00001111, 0b11100010, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00110111, 0b11011010, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b11001111, 0b11100111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00001111, 0b11111000, 0b01111111, 0b11111000, 0b00000000, 0b00000000, 0b10001111, 0b11111010, 0b00011111, 0b11100000, 0b00000000, 0b00000000, 0b00011111, 0b11111000, 0b00001111, 0b11000000, 0b00000000, 0b00000000, 0b11111111, 0b11111101, 0b00001111, 0b11000000, 0b00000000, 0b00000000, 0b00011111, 0b11111101, 0b10001111, 0b11100000, 0b00000000, 0b00000000, 0b00001111, 0b11111010, 0b10001111, 0b11100100, 0b00000000, 0b00000000, 0b00001111, 0b11111010, 0b00010011, 0b11000000, 0b00000000, 0b00000000, 0b00001111, 0b11111000, 0b11100011, 0b11010101, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00011111, 0b11111000, 0b00000000, 0b00000000, 0b00101110, 0b11101100, 0b00100111, 0b11100000, 0b11101110, 0b11101110, 0b11000000, 0b00000011, 0b01000011, 0b11000000, 0b00000000, 0b00000000, 0b01101011, 0b10110110, 0b11000011, 0b11111111, 0b10111011, 0b10111011, 0b01100000, 0b00000110, 0b01000011, 0b11000100, 0b00000000, 0b00000000, 0b10101110, 0b11100111, 0b01000011, 0b11000100, 0b11101110, 0b11101110, 0b11100000, 0b00000111, 0b01000011, 0b11000000, 0b00000000, 0b00000000, 0b11101011, 0b10110111, 0b01000011, 0b11000000, 0b10111011, 0b10111011, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10111111, 0b11111010, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00011111, 0b11111000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00011111, 0b11111000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10011111, 0b11111010, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00011111, 0b11111100, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10011111, 0b11100100, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10011111, 0b11100100, 0b11111111, 0b11100011, 0b11111111, 0b11111111, 0b11111111, 0b11111100, 0b11111111, 0b11011101, 0b11111111, 0b11111111, 0b00011111, 0b11111100, 0b00000011, 0b11011100, 0b11111111, 0b11111111, 0b00011111, 0b11111100, 0b11111111, 0b11011101, 0b11111111, 0b11111111, 0b10011111, 0b11111100, 0b11010111, 0b11100011, 0b11111111, 0b11111111, 0b10011111, 0b11111100, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111 };

uint8_t game_x = 1;
uint8_t game_y = 1;

uint8_t game_map[GAME_H][GAME_W] = {
    {1, 4, 1, 1, 4, 4, 4, 1, 4, 4, 1, 4, 1, 1, 1, 4, 1, 1, 1},
    {1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 4, 4, 4, 0, 4, 4, 1},
    {1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 8, 0, 0, 0, 0, 0, 1},
    {1, 0, 1, 0, 0, 1, 0, 1, 4, 0, 4, 4, 4, 4, 4, 4, 1, 0, 1},
    {1, 0, 4, 4, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 4, 4, 4, 4, 1, 0, 1, 0, 1},
    {1, 0, 4, 4, 1, 4, 4, 4, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1},
    {1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 4, 0, 1, 0, 1},
    {1, 4, 4, 0, 1, 0, 1, 1, 1, 4, 0, 1, 0, 1, 0, 8, 1, 0, 1},
    {1, 5, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 4, 4, 4, 1, 0, 1},
    {1, 1, 1, 0, 4, 0, 4, 6, 4, 0, 1, 1, 0, 0, 0, 0, 4, 0, 1},
    {1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 8, 1, 1, 0, 0, 7, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};

void gameFinish2()
{
  gl->clearTexture(TEXTURE_BINDING_0);
  gl->clearTexture(TEXTURE_BINDING_1);
  gl->clearTexture(TEXTURE_BINDING_2);
  gl->clearTexture(TEXTURE_BINDING_3);
  gl->clearTexture(TEXTURE_BINDING_4);
  gl->clearTexture(TEXTURE_BINDING_5);
  gl->clearTexture(TEXTURE_BINDING_6);
  gl->clearTexture(TEXTURE_BINDING_7);
}

void gameSetup2() 
{
  Serial.println("Hello Amerika!");
  gl->loadTileMap(tilemap2, 48, 48, 16, 16);
  gl->loadTileFromMap(2, 0, TEXTURE_BINDING_0);
  gl->loadTileFromMap(1, 0, TEXTURE_BINDING_1);
  gl->loadTileFromMap(0, 0, TEXTURE_BINDING_2);
  gl->loadTileFromMap(2, 1, TEXTURE_BINDING_3);
  gl->loadTileFromMap(1, 1, TEXTURE_BINDING_4);
  gl->loadTileFromMap(0, 1, TEXTURE_BINDING_5);
  gl->loadTileFromMap(2, 2, TEXTURE_BINDING_6);
  gl->loadTileFromMap(1, 2, TEXTURE_BINDING_7);
}

void gameLoop2()
{
    gl->clearDisplayBuffer();
    gl->fillRect(0, 0, 400, 16, BLACK);
    gl->fillRect(0, 224, 400, 16, BLACK);
    gl->fillRect(0, 0, 16, 240, BLACK);
    gl->fillRect(320, 0, 80, 240, BLACK);
    gl->setCursor(32, 2);
    gl->textColor(WHITE);
    gl->print("Score: 0");
    for(int i = 0; i < GAME_H; i++)
    {
        for(int j = 0; j < GAME_W; j++)
        {
            if(game_map[i][j] != 0)
                gl->drawTexture(16 + j*16, 16 + i*16, game_map[i][j]-1);
        }
    }
    if(isPressedSticky(BUTTON_DOWN_ID) && (game_map[game_y+1][game_x] == 0))
        game_y++;
    if(isPressedSticky(BUTTON_UP_ID) && (game_map[game_y-1][game_x] == 0))
        game_y--;
    if(isPressedSticky(BUTTON_RIGHT_ID) && (game_map[game_y][game_x+1] == 0))
        game_x++;
    if(isPressedSticky(BUTTON_LEFT_ID) && (game_map[game_y][game_x-1] == 0))
        game_x--;

    gl->drawTexture(16 + game_x*16, 16 + game_y*16, TEXTURE_BINDING_2);
    gl->refresh();
}

void gameFinish1()
{
  Serial.println("end");
}

void gameSetup1() 
{
  Serial.println("Hello Amerika!");
  gl->loadTileMap(tileMap, 64, 64, 32, 32);
  gl->loadTileFromMap(0, 0, TEXTURE_BINDING_0);
  gl->loadTileFromMap(1, 0, TEXTURE_BINDING_1);
}

void gameLoop1()
{
  gl->clearDisplayBuffer();
  gl->drawTexture(192, 64, TEXTURE_BINDING_1);
  gl->drawTexture(64, 32, TEXTURE_BINDING_1);
  gl->drawTexture(64, 160, TEXTURE_BINDING_1);
  gl->drawTexture(128, 128, TEXTURE_BINDING_1);
  gl->drawTexture(320, 192, TEXTURE_BINDING_1);
  if(digitalRead(BUTTON_UP))
    y-=MOVEMENT_SPEED;
  if(digitalRead(BUTTON_DOWN))
    y+=MOVEMENT_SPEED;
  if(digitalRead(BUTTON_LEFT))
    x-=MOVEMENT_SPEED;
  if(digitalRead(BUTTON_RIGHT))
    x+=MOVEMENT_SPEED;
  //display.drawBitmap(x, y, sprite, 32, 32, BLACK);
  //display.fillRectD(x, y, 40, 40);
  gl->drawTexture(x, y, TEXTURE_BINDING_0);
  gl->refresh();
}

void setup(void)
{
  Serial.begin(9600);
  delay(2000);
  Serial.println("Hello!");
  registerGame(gameSetup1, gameLoop1, gameFinish1,  "Test game 1");
  registerGame(gameSetup2, gameLoop2, gameFinish2, "Test game 2");
  registerGame(gameSetup1, gameLoop1, gameFinish1, "Crash bandicoot");
  registerGame(gameSetup1, gameLoop1, gameFinish1, "Destiny 2");

  setupConsole(SHARP_CLK, SHARP_DI, SHARP_CS, 400, 240);

  //display.loadTexture(sprite, 32, 32, TEXTURE_BINDING_0);
  //display.loadTexture(house, 32, 32, TEXTURE_BINDING_1);
  /*display.loadTileMap(tileMap, 64, 64, 32, 32);
  display.loadTileFromMap(0, 0, TEXTURE_BINDING_0);
  display.loadTileFromMap(1, 0, TEXTURE_BINDING_1);*/
  Serial.println("Texture loaded");
  Serial.printf("Flash size: %i\n", ESP.getFlashChipSize());
}


void loop(void)
{
  consoleLoop();
}