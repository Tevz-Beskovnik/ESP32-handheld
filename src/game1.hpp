#pragma once

#include <Console-IO.hpp>
#include <GL.hpp>

#define MOVEMENT_SPEED 8

uint8_t tileMap[512] = {
  0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b01111111, 0b11111110, 0b11111111, 
  0b11111111, 0b10111111, 0b11111111, 0b11111111, 0b11111111, 0b10111111, 0b11111100, 0b11111111, 
  0b11111111, 0b01011111, 0b11111110, 0b11111111, 0b11111111, 0b10011111, 0b11111010, 0b11111111,
  0b11111111, 0b00001111, 0b11111000, 0b11111111, 0b11111111, 0b10101111, 0b11110010, 0b11111111, 
  0b11111111, 0b00000111, 0b11100110, 0b11111111, 0b11111111, 0b11100111, 0b11101000, 0b11111111, 
  0b11111111, 0b00000011, 0b11010000, 0b11111111, 0b11111111, 0b10101011, 0b11001010, 0b11111111, 
  0b11111111, 0b00000001, 0b10100000, 0b11111111, 0b11111111, 0b10111001, 0b10100010, 0b11111111, 
  0b11111111, 0b01110000, 0b01001110, 0b11111111, 0b11111111, 0b11101010, 0b00101000, 0b11111111, 
  0b11111111, 0b11111000, 0b00011111, 0b11111111, 0b01111111, 0b10101110, 0b10001010, 0b11111110, 
  0b01111111, 0b11111110, 0b01111111, 0b11111110, 0b10111111, 0b00111010, 0b10100010, 0b11111100, 
  0b10111111, 0b11111110, 0b01111111, 0b11111101, 0b10011111, 0b10101011, 0b00101000, 0b11111010, 
  0b10111111, 0b10011110, 0b01111001, 0b11111101, 0b10101111, 0b11001110, 0b10001010, 0b11110010, 
  0b10111111, 0b10111111, 0b11111101, 0b11111101, 0b11100111, 0b11001010, 0b10100110, 0b11101000, 
  0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b10101011, 0b11010011, 0b00100110, 0b11101010, 
  0b11111111, 0b11111110, 0b01111111, 0b11111111, 0b10111011, 0b11011010, 0b10010110, 0b11100010, 
  0b11111111, 0b11111110, 0b01111111, 0b11111111, 0b11101011, 0b11011000, 0b10110110, 0b11101000, 
  0b11111111, 0b00111110, 0b01111100, 0b11111111, 0b10101011, 0b11011010, 0b00110110, 0b11101010, 
  0b11111111, 0b11111101, 0b10111111, 0b11111111, 0b00111011, 0b11011011, 0b10110110, 0b11100010, 
  0b11111111, 0b11111011, 0b11011111, 0b11111111, 0b10101011, 0b11011011, 0b10110110, 0b11101001, 
  0b11111111, 0b11100111, 0b11100111, 0b11111111, 0b00001011, 0b00000000, 0b00000000, 0b11101000, 
  0b11111111, 0b11011000, 0b00011011, 0b11111111, 0b00101011, 0b11111111, 0b11111111, 0b11110100, 
  0b01111111, 0b00111111, 0b11111100, 0b11111110, 0b10110111, 0b11111111, 0b11111111, 0b11111101, 
  0b01111111, 0b11111011, 0b11011110, 0b11111110, 0b10111111, 0b11111111, 0b11111111, 0b11111101, 
  0b01111111, 0b11111010, 0b10011111, 0b11111110, 0b10111111, 0b11100001, 0b11000011, 0b11111101, 
  0b01111111, 0b11111001, 0b01011110, 0b11111110, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  0b01111111, 0b11111011, 0b11011111, 0b11111110, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  0b11111111, 0b00000000, 0b00000000, 0b11111111, 0b10111111, 0b11011110, 0b10111101, 0b11111101, 
  0b11111111, 0b01111011, 0b11011110, 0b11111111, 0b10111111, 0b11011110, 0b11000011, 0b11111101, 
  0b11111111, 0b01111011, 0b11011110, 0b11111111, 0b10111111, 0b11011100, 0b10000001, 0b11111101, 
  0b11111111, 0b01100011, 0b11000110, 0b11111111, 0b10111111, 0b11011110, 0b11111111, 0b11111101, 
  0b11111111, 0b00011011, 0b11011000, 0b11111111, 0b00111111, 0b11011110, 0b11111111, 0b11111100, 
  0b11111111, 0b10000011, 0b11000001, 0b11111111, 0b00111111, 0b00000000, 0b00000000, 0b11111100, 
  0b01111111, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b10111111, 0b00111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011111, 0b11011011, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11101111, 0b11100111, 0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11110111, 0b11110111, 0b11111011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111011, 0b11011011, 0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111101, 0b10111101, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111110, 0b01111110, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b01111110, 0b11111111, 0b10111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b10111101, 0b11111101, 0b00111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011011, 0b11111011, 0b11011011, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11100111, 0b11110111, 0b11101111, 0b11111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11110111, 0b11101111, 0b11110111, 0b11111011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011011, 0b11011111, 0b11011011, 0b11110111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b10111101, 0b10111111, 0b10111101, 0b11101111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b01111101, 0b11111111, 0b01111110, 0b11011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11111011, 0b01111110, 0b11111111, 0b10111110, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11110111, 0b10111101, 0b11111101, 0b10111101, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11101111, 0b11011011, 0b11111011, 0b11011011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 
  0b11011111, 0b11101111, 0b11110111, 0b11101111, 0b11111111, 0b00011111, 0b11111000, 0b11111111, 
  0b10111111, 0b11110111, 0b11101111, 0b11100111, 0b11111111, 0b11100111, 0b11100111, 0b11111111, 
  0b01111111, 0b11011011, 0b11011111, 0b11011011, 0b11111111, 0b11111011, 0b11011111, 0b11111111, 
  0b11111111, 0b10111100, 0b10111111, 0b10111101, 0b11111111, 0b11111101, 0b10111111, 0b11111111, 
  0b11111111, 0b01111101, 0b11111111, 0b01111110, 0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  0b11111111, 0b11111011, 0b01111110, 0b01111111, 0b11111111, 0b11010110, 0b01111111, 0b11111111, 
  0b11111111, 0b11110111, 0b10111101, 0b10111111, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b11101111, 0b11011011, 0b11011111, 0b01111111, 0b10111011, 0b11111111, 0b11111110, 
  0b11111111, 0b11011111, 0b11101111, 0b11101111, 0b01111111, 0b11000111, 0b11111111, 0b11111110, 
  0b11111111, 0b10111111, 0b11100111, 0b11110111, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b01111111, 0b11011011, 0b11111011, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 
  0b11111111, 0b11111111, 0b10111100, 0b11111101, 0b11111111, 0b11111110, 0b01111111, 0b11111111, 
  0b11111111, 0b11111111, 0b01111111, 0b11111110, 0b11111111, 0b00000001, 0b10000000, 0b11111111 
};

uint16_t x = 200, y = 0;

void gameFinish1(GL* gfx)
{
  #ifdef DEBUG
  Serial.println("end");
  #endif
}

void gameSetup1(GL* gfx) 
{
  gfx->loadTileMap(tileMap, 64, 64, 32, 32);
  gfx->loadTileFromMap(0, 0, TEXTURE_BINDING_0);
  gfx->loadTileFromMap(1, 0, TEXTURE_BINDING_1);
}

void gameLoop1(GL* gfx)
{
  gfx->clearDisplayBuffer();
  gfx->drawTexture(192, 64, TEXTURE_BINDING_1);
  gfx->drawTexture(64, 32, TEXTURE_BINDING_1);
  gfx->drawTexture(64, 160, TEXTURE_BINDING_1);
  gfx->drawTexture(128, 128, TEXTURE_BINDING_1);
  gfx->drawTexture(320, 192, TEXTURE_BINDING_1);
  if(digitalRead(BUTTON_UP))
    y-=MOVEMENT_SPEED;
  if(digitalRead(BUTTON_DOWN))
    y+=MOVEMENT_SPEED;
  if(digitalRead(BUTTON_LEFT))
    x-=MOVEMENT_SPEED;
  if(digitalRead(BUTTON_RIGHT))
    x+=MOVEMENT_SPEED;
  //display.drawBitmap(x, y, sprite, 32, 32, BLACK);
  //display.fillRectD(x, y, 40, 40);
  gfx->drawTexture(x, y, TEXTURE_BINDING_0);
  gfx->refresh();
}